																		  using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using IWshRuntimeLibrary;

namespace Vertical_Toolbar_win
{
    public class VerticalToolbar : Form
    {
        private List<string> shortcuts;
        private Button pinButton;
        private bool isPinned = true;
        private ContextMenuStrip shortcutContextMenu; // For individual shortcuts
        private ContextMenuStrip toolbarContextMenu;  // For the toolbar itself

        public VerticalToolbar()
        {
            InitialzeComponents();
        }

        public void InitialzeComponents()
        {
            // Toolbar positioning and appearance
            this.Text = "Custom Toolbar";
            this.FormBorderStyle = FormBorderStyle.None;
            this.Width = 130;
            this.Height = Screen.PrimaryScreen.Bounds.Height - 100;
            this.BackColor = Color.FromArgb(50, 50, 50);
            this.StartPosition = FormStartPosition.Manual;
            this.TopMost = isPinned;

            // Position toolbar at the top-right corner
            this.Load += (s, e) => this.Location = new Point(Screen.PrimaryScreen.Bounds.Width - this.Width + 60, Screen.PrimaryScreen.Bounds.Top);

            // Rounded corners
            this.Region = System.Drawing.Region.FromHrgn(CreateRoundRectRgn(0, 0, Width, Height, 20, 20));

            // Close button
            Button closeButton = new Button
            {
                Text = "✕",
                FlatStyle = FlatStyle.Flat,
                Size = new Size(30, 30),
                ForeColor = Color.White,
                BackColor = Color.FromArgb(150, 50, 50),
                Location = new Point(this.Width - 35, 5),
                Cursor = Cursors.Hand
            };
            closeButton.FlatAppearance.BorderSize = 0;
            closeButton.Click += (s, e) => this.Close();
            this.Controls.Add(closeButton);

            // Pin button for "Always on Top"
            pinButton = new Button
            {
                Text = "📌",
                FlatStyle = FlatStyle.Flat,
                Size = new Size(30, 30),
                ForeColor = isPinned ? Color.LimeGreen : Color.Gray,
                BackColor = Color.FromArgb(70, 70, 70),
                Location = new Point(this.Width - 70, 5),
                Cursor = Cursors.Hand
            };
            pinButton.FlatAppearance.BorderSize = 0;
            pinButton.Click += TogglePinState;
            this.Controls.Add(pinButton);

            // Context menu for shortcuts (Delete and Rename)
            shortcutContextMenu = new ContextMenuStrip();
            var deleteMenuItem = new ToolStripMenuItem("Delete");
            deleteMenuItem.Click += DeleteShortcut_Click;
            var renameMenuItem = new ToolStripMenuItem("Rename");
            renameMenuItem.Click += RenameShortcut_Click;
            shortcutContextMenu.Items.Add(deleteMenuItem);
            shortcutContextMenu.Items.Add(renameMenuItem);

            // Context menu for the entire toolbar (Refresh and Open Folder)
            toolbarContextMenu = new ContextMenuStrip();
            var refreshMenuItem = new ToolStripMenuItem("Refresh");
            refreshMenuItem.Click += RefreshShortcuts_Click;
            var openFolderMenuItem = new ToolStripMenuItem("Open Source Folder");
            openFolderMenuItem.Click += OpenSourceFolder_Click;
            toolbarContextMenu.Items.Add(refreshMenuItem);
            toolbarContextMenu.Items.Add(openFolderMenuItem);

            // Show toolbar context menu on right-click
            this.MouseUp += (s, e) =>
            {
                if (e.Button == MouseButtons.Right)
                {
                    toolbarContextMenu.Show(Cursor.Position);
                }
            };

            // Enable dragging from any point on the form
            this.MouseDown += Form_MouseDown;

            // Change background color when the window is activated or deactivated
            this.Activated += (s, e) => this.BackColor = Color.FromArgb(40, 40, 40);
            this.Deactivate += (s, e) => this.BackColor = Color.FromArgb(50, 50, 50);

            // Load shortcuts initially
            LoadShortcutsFromFolder(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Custom_Toolbar"));
        }

        private void TogglePinState(object sender, EventArgs e)
        {
            isPinned = !isPinned;
            this.TopMost = isPinned;
            pinButton.ForeColor = isPinned ? Color.LimeGreen : Color.Gray;
        }

        private void LoadShortcutsFromFolder(string folderPath)
        {
            // Ensure the folder exists
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
            }

            // Clear existing shortcut buttons
            List<Control> controlsToRemove = new List<Control>();
            foreach (Control control in this.Controls)
            {
                if (control is Button button && button.Tag != null)
                {
                    controlsToRemove.Add(button);
                }
            }
            foreach (Control control in controlsToRemove)
            {
                this.Controls.Remove(control);
                control.Dispose();
            }

            // Load and display shortcuts
            shortcuts = new List<string>();
            shortcuts.AddRange(Directory.GetFiles(folderPath, "*.lnk"));
            shortcuts.AddRange(Directory.GetFiles(folderPath, "*.exe"));

            int topOffset = 50;

            foreach (var shortcut in shortcuts)
            {
                Button shortcutButton = new Button
                {
                    Text = Path.GetFileNameWithoutExtension(shortcut),
                    Size = new Size(110, 90),
                    FlatStyle = FlatStyle.Flat,
                    BackColor = Color.FromArgb(40, 40, 40),
                    ForeColor = Color.White,
                    Cursor = Cursors.Hand,
                    TextAlign = ContentAlignment.BottomCenter,
                    Font = new Font("Arial", 8, FontStyle.Regular),
                    Location = new Point(10, topOffset),
                    Tag = shortcut // Store the file path in the Tag property
                };
                shortcutButton.FlatAppearance.BorderSize = 0;
                shortcutButton.FlatAppearance.MouseOverBackColor = Color.FromArgb(60, 60, 60);

                try
                {
                    Icon icon = Icon.ExtractAssociatedIcon(shortcut);
                    if (icon != null)
                    {
                        shortcutButton.Image = new Bitmap(icon.ToBitmap(), new Size(40, 40));
                        shortcutButton.ImageAlign = ContentAlignment.TopCenter;
                    }
                }
                catch
                {
                    shortcutButton.Image = new Bitmap(SystemIcons.Application.ToBitmap(), new Size(40, 40));
                    shortcutButton.ImageAlign = ContentAlignment.TopCenter;
                }

                // Right-click context menu for individual shortcuts
                shortcutButton.MouseUp += (s, e) =>
                {
                    if (e.Button == MouseButtons.Right)
                    {
                        shortcutContextMenu.Show(Cursor.Position);
                        shortcutContextMenu.Tag = shortcutButton; // Reference the clicked button
                    }
                };

                shortcutButton.Click += (s, e) =>
                {
                    if (shortcut.EndsWith(".lnk"))
                    {
                        var shell = new WshShell();
                        var link = (IWshShortcut)shell.CreateShortcut(shortcut);
                        System.Diagnostics.Process.Start(link.TargetPath);
                    }
                    else
                    {
                        System.Diagnostics.Process.Start(shortcut);
                    }
                };

                this.Controls.Add(shortcutButton);
                topOffset += 95;
            }
        }

        private void DeleteShortcut_Click(object sender, EventArgs e)
        {
            if (shortcutContextMenu.Tag is Button shortcutButton)
            {
                string shortcutPath = shortcutButton.Tag as string;

                var result = MessageBox.Show($"Are you sure you want to delete {Path.GetFileName(shortcutPath)}?", "Delete Shortcut", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                if (result == DialogResult.Yes)
                {
                    try
                    {
                        System.IO.File.Delete(shortcutPath);
                        this.Controls.Remove(shortcutButton);
                        shortcutButton.Dispose();
                        InitialzeComponents();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"Error deleting shortcut: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }

        private void RenameShortcut_Click(object sender, EventArgs e)
        {
            if (shortcutContextMenu.Tag is Button shortcutButton)
            {
                string shortcutPath = shortcutButton.Tag as string;
                string currentName = Path.GetFileNameWithoutExtension(shortcutPath);

                // Prompt for new name
                string newName = Microsoft.VisualBasic.Interaction.InputBox("Enter new name:", "Rename Shortcut", currentName);
                if (!string.IsNullOrWhiteSpace(newName) && newName != currentName)
                {
                    // Create new path with the new name
                    string newPath = Path.Combine(Path.GetDirectoryName(shortcutPath), newName + Path.GetExtension(shortcutPath));

                    try
                    {
                        // Rename the file and update the button's Tag and Text properties
                        System.IO.File.Move(shortcutPath, newPath);
                        shortcutButton.Text = newName;
                        shortcutButton.Tag = newPath; // Update the button's Tag to the new path
                        InitialzeComponents();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"Error renaming shortcut: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }

        // Updated click handler to ensure Tag contains a valid path before starting
        private void ShortcutButton_Click(object sender, EventArgs e)
        {
            if (sender is Button shortcutButton && shortcutButton.Tag is string shortcutPath && System.IO.File.Exists(shortcutPath))
            {
                try
                {
                    // Start the process based on the file type
                    if (shortcutPath.EndsWith(".lnk"))
                    {
                        var shell = new WshShell();
                        var link = (IWshShortcut)shell.CreateShortcut(shortcutPath);
                        System.Diagnostics.Process.Start(link.TargetPath);
                    }
                    else
                    {
                        System.Diagnostics.Process.Start(shortcutPath);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error opening shortcut: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            else
            {
                MessageBox.Show("The shortcut path is invalid or has been deleted.", "Invalid Shortcut", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void RefreshShortcuts_Click(object sender, EventArgs e)
        {
            // Reload the shortcuts from the folder
            //LoadShortcutsFromFolder(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Custom_Toolbar"));
            InitialzeComponents();
        }

        private void OpenSourceFolder_Click(object sender, EventArgs e)
        {
            // Open the folder in File Explorer
            string folderPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Custom_Toolbar");
            System.Diagnostics.Process.Start("explorer.exe", folderPath);
        }

        // Enable dragging from any point on the form
        private void Form_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                ReleaseCapture();
                SendMessage(Handle, WM_NCLBUTTONDOWN, HT_CAPTION, 0);
            }
        }

        // Rounded corners using Windows API
        [DllImport("Gdi32.dll", EntryPoint = "CreateRoundRectRgn")]
        private static extern IntPtr CreateRoundRectRgn(int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nWidthEllipse, int nHeightEllipse);

        // Import necessary libraries for dragging functionality
        [DllImport("user32.dll")]
        private static extern bool ReleaseCapture();

        [DllImport("user32.dll")]
        private static extern int SendMessage(IntPtr hWnd, int Msg, int wParam, int lParam);

        private const int WM_NCLBUTTONDOWN = 0xA1;
        private const int HT_CAPTION = 0x2;
    }
}